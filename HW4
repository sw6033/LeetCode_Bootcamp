Question 1
from collections import defaultdict, deque

class Solution:
    def numBusesToDestination(self, routes: List[List[int]], source: int, target: int) -> int:
        if source == target:
            return 0
        
        # Map each stop to the buses that go through it
        stop_to_buses = defaultdict(set)
        for i, route in enumerate(routes):
            for stop in route:
                stop_to_buses[stop].add(i)
        
        # BFS variables
        visited_buses = set()  # To avoid revisiting the same bus
        visited_stops = set([source])  # To avoid revisiting the same stop
        queue = deque([(source, 0)])  # (current stop, number of buses taken so far)
        
        # BFS
        while queue:
            current_stop, buses_taken = queue.popleft()
            
            # Check all buses that go through the current stop
            for bus in stop_to_buses[current_stop]:
                if bus in visited_buses:
                    continue
                visited_buses.add(bus)
                
                # Check all stops that you can reach with the current bus
                for next_stop in routes[bus]:
                    if next_stop == target:
                        return buses_taken + 1  # Found the target
                    if next_stop not in visited_stops:
                        visited_stops.add(next_stop)
                        queue.append((next_stop, buses_taken + 1))
        
        # Target cannot be reached
        return -1

Question 2
class Solution:
    def decodeString(self, s: str) -> str:
        stack = []
        for char in s:
            if char != ']':
                # Push everything but closing bracket onto stack
                stack.append(char)
            else:
                # Pop the string inside the brackets
                substr = ''
                while stack[-1] != '[':
                    substr = stack.pop() + substr
                stack.pop()  # Remove the '['
                
                # Get the number (could be more than one digit)
                k = ''
                while stack and stack[-1].isdigit():
                    k = stack.pop() + k
                
                # Repeat the string and push back onto stack
                stack.append(int(k) * substr)
        
        # Join everything to get the decoded string
        return ''.join(stack)

Question 3 
class Solution:
  def peopleAwareOfSecret(self, n: int, delay: int, forget: int) -> int:
    kMod = 1_000_000_007
    share = 0
    # dp[i] := the number of people know the secret at day i
    dp = [0] * n  # Maps day i to i + 1.
    dp[0] = 1

    for i in range(1, n):
      if i - delay >= 0:
        share += dp[i - delay]
      if i - forget >= 0:
        share -= dp[i - forget]
      share += kMod
      share %= kMod
      dp[i] = share

    # People before day `n - forget - 1` already forget the secret.
    return sum(dp[-forget:]) % kMod
